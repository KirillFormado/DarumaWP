<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ResourceFlowDirection" xml:space="preserve">
    <value>LeftToRight</value>
    <comment>Controls the FlowDirection for all elements in the RootFrame. Set to the traditional direction of this resource file's language</comment>
  </data>
  <data name="ResourceLanguage" xml:space="preserve">
    <value>en-US</value>
    <comment>Controls the Language and ensures that the font for all elements in the RootFrame aligns with the app's language. Set to the language code of this resource file's language.</comment>
  </data>
  <data name="DarumaInfo" xml:space="preserve">
    <value>Daruma is a Japanese traditional doll. It brings happiness and grants wishes. Fill in one eye of Daruma and set your goal. Fill in the other eye when the dream comes true. 

Touch Daruma and flick your finger left or right to communicate with Daruma.

Here is a story from Daruma: there was a young man who graduated from college and decided to find a job somewhere away from his hometown. He walked into the local bus station, approached the ticket counter and asked the clerk for a bus ticket. What do you suppose the ticket clerk asked the young man? He said, "Where do you want to go?" The young man said, "I don't know. Just give me a ticket to somewhere." It is not surprising, but he didn't get a ticket! The moral of the story is that if you don't know where you are going, any road will take you there. Daruma requests you to specify exactly what you want in order to make your dreams come true!</value>
  </data>
  <data name="EmptyWishTextBox" xml:space="preserve">
    <value>Empty</value>
  </data>
  <data name="WishButton" xml:space="preserve">
    <value>Wish</value>
  </data>
  <data name="Add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="Info" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="Burn" xml:space="preserve">
    <value>Burn</value>
  </data>
  <data name="Empty" xml:space="preserve">
    <value>Empty</value>
  </data>
  <data name="Executed" xml:space="preserve">
    <value>Executed</value>
  </data>
  <data name="Expired" xml:space="preserve">
    <value>Expired</value>
  </data>
  <data name="Maked" xml:space="preserve">
    <value>Maked</value>
  </data>
  <data name="Back" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="Friendship" xml:space="preserve">
    <value>Friendship</value>
  </data>
  <data name="Funny" xml:space="preserve">
    <value>Funny</value>
  </data>
  <data name="Health" xml:space="preserve">
    <value>Health</value>
  </data>
  <data name="Love" xml:space="preserve">
    <value>Love</value>
  </data>
  <data name="Luck" xml:space="preserve">
    <value>Luck</value>
  </data>
  <data name="Rich" xml:space="preserve">
    <value>Rich</value>
  </data>
  <data name="Pin" xml:space="preserve">
    <value>Pin</value>
  </data>
  <data name="Unpin" xml:space="preserve">
    <value>Unpin</value>
  </data>
  <data name="Daruma" xml:space="preserve">
    <value>Daruma</value>
  </data>
  <data name="Daruma_Up_Case" xml:space="preserve">
    <value>DARUMA</value>
  </data>
  <data name="TouchAndWish" xml:space="preserve">
    <value>Touch and make a wish</value>
  </data>
  <data name="Copy" xml:space="preserve">
    <value>Copy</value>
  </data>
  <data name="Share" xml:space="preserve">
    <value>Share</value>
  </data>
  <data name="IsDelete" xml:space="preserve">
    <value>Is delete?</value>
  </data>
  <data name="Mail" xml:space="preserve">
    <value>Mail</value>
  </data>
  <data name="Messages" xml:space="preserve">
    <value>Messages</value>
  </data>
  <data name="ShareBy_Up_Case" xml:space="preserve">
    <value>SHARE BY</value>
  </data>
  <data name="SocialNetwork" xml:space="preserve">
    <value>Social Networks</value>
  </data>
  <data name="Favorites" xml:space="preserve">
    <value>Favorites</value>
  </data>
  <data name="FavoritQuotations" xml:space="preserve">
    <value>Favorit quotations</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="ToСlipboard" xml:space="preserve">
    <value>Сlipboard</value>
  </data>
  <data name="Refresh" xml:space="preserve">
    <value>Quote</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="Forward" xml:space="preserve">
    <value>Forward</value>
  </data>
  <data name="RateAndReview" xml:space="preserve">
    <value>Rate and review</value>
  </data>
  <data name="QuoteSeparator" xml:space="preserve">
    <value>***</value>
  </data>
  <data name="IsWishComeTrue" xml:space="preserve">
    <value>Is wish come true?</value>
  </data>
</root>